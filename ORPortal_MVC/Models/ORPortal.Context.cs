//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ORPortal_MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IOR_V1 : DbContext
    {
        public IOR_V1()
            : base("name=IOR_V1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Actual> Actuals { get; set; }
        public virtual DbSet<Break> Breaks { get; set; }
        public virtual DbSet<CommonProblem> CommonProblems { get; set; }
        public virtual DbSet<MachineGroup> MachineGroups { get; set; }
        public virtual DbSet<MachineInput> MachineInputs { get; set; }
        public virtual DbSet<Machine> Machines { get; set; }
        public virtual DbSet<OFF> OFFs { get; set; }
        public virtual DbSet<Plan> Plans { get; set; }
        public virtual DbSet<ProjectMachine> ProjectMachines { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<ShiftMachine> ShiftMachines { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<SpecificProblem> SpecificProblems { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Command> Commands { get; set; }
        public virtual DbSet<ManPower> ManPowers { get; set; }
        public virtual DbSet<ProjectTracker> ProjectTrackers { get; set; }
        public virtual DbSet<Scrap> Scraps { get; set; }
        public virtual DbSet<Stop> Stops { get; set; }
    
        public virtual ObjectResult<getDefinedStopDuration_Result> getDefinedStopDuration(Nullable<System.DateTime> startTs, Nullable<System.DateTime> stopTs, Nullable<int> stopType, Nullable<int> machine_Id)
        {
            var startTsParameter = startTs.HasValue ?
                new ObjectParameter("StartTs", startTs) :
                new ObjectParameter("StartTs", typeof(System.DateTime));
    
            var stopTsParameter = stopTs.HasValue ?
                new ObjectParameter("StopTs", stopTs) :
                new ObjectParameter("StopTs", typeof(System.DateTime));
    
            var stopTypeParameter = stopType.HasValue ?
                new ObjectParameter("StopType", stopType) :
                new ObjectParameter("StopType", typeof(int));
    
            var machine_IdParameter = machine_Id.HasValue ?
                new ObjectParameter("Machine_Id", machine_Id) :
                new ObjectParameter("Machine_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDefinedStopDuration_Result>("getDefinedStopDuration", startTsParameter, stopTsParameter, stopTypeParameter, machine_IdParameter);
        }
    
        public virtual ObjectResult<getOffDuration_Result> getOffDuration(Nullable<System.DateTime> startTs, Nullable<System.DateTime> stopTs, Nullable<int> machine_Id)
        {
            var startTsParameter = startTs.HasValue ?
                new ObjectParameter("StartTs", startTs) :
                new ObjectParameter("StartTs", typeof(System.DateTime));
    
            var stopTsParameter = stopTs.HasValue ?
                new ObjectParameter("StopTs", stopTs) :
                new ObjectParameter("StopTs", typeof(System.DateTime));
    
            var machine_IdParameter = machine_Id.HasValue ?
                new ObjectParameter("Machine_Id", machine_Id) :
                new ObjectParameter("Machine_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getOffDuration_Result>("getOffDuration", startTsParameter, stopTsParameter, machine_IdParameter);
        }
    
        public virtual ObjectResult<getUnDefinedStopDuration_Result> getUnDefinedStopDuration(Nullable<System.DateTime> startTs, Nullable<System.DateTime> stopTs, Nullable<int> stopType, Nullable<int> machine_Id)
        {
            var startTsParameter = startTs.HasValue ?
                new ObjectParameter("StartTs", startTs) :
                new ObjectParameter("StartTs", typeof(System.DateTime));
    
            var stopTsParameter = stopTs.HasValue ?
                new ObjectParameter("StopTs", stopTs) :
                new ObjectParameter("StopTs", typeof(System.DateTime));
    
            var stopTypeParameter = stopType.HasValue ?
                new ObjectParameter("StopType", stopType) :
                new ObjectParameter("StopType", typeof(int));
    
            var machine_IdParameter = machine_Id.HasValue ?
                new ObjectParameter("Machine_Id", machine_Id) :
                new ObjectParameter("Machine_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUnDefinedStopDuration_Result>("getUnDefinedStopDuration", startTsParameter, stopTsParameter, stopTypeParameter, machine_IdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
